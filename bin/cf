#! /usr/bin/env node

// console.log('cf cli~~~~~') // npm link 会自动产生执行命令


// 1) 配置可执行命令 commander
// console.log(process.argv, 'process.argv')
const program = require('commander');
const chalk = require('chalk')
// 核心功能 1.创建项目 2.更改配置文件 3.ui界面 @vue/ui

// const cleanArgs = (cmd) => {

// }

// 万一重名了呢？ 强制创建的模式
program.command('create <app-name>')
    .description('create a new project')
    .option('-f, --force', 'overwrite target directory if it exists')
    .action((name, cmd) => {
        // console.log(name, cmd) // 我需要提取这个cmd的属性  eg cf create ff --force    name:ff cmd:{force:true}
        require('../lib/create')(name, cmd)
    })
// 配置文件中
program.command('config [value]')
    .description('inspect and modify the config')
    .option('-g, --get <path>', 'get value from option')
    .option('-s, --set <path> <value>')
    .option('-d, --delete <path>', 'delete option from config')
    .action((value, cmd) => {
        // console.log(value, cmd)  // cf config -s a 1    value:1 cmd:{set:'a'}

    })
program.command('ui')
    .description('start and open cf-cli ui')
    .option('-p, --port <port>', 'Port used for the UI Server')
    .action((cmd) => {
        // console.log(cmd)
    })
program.on('--help', () => {
    console.log()
    // console.log(` Run cf-cli <command> --help show details`)
    console.log(` Run ${chalk.cyan(`cf-cli/cf <command> --help`)} show details`)
    console.log()
})

program
    .version(`cf-cli@${require('../package.json').version}`)
    .usage('<command> [option]')
// 解析用户执行命令传入的参数
program.parse(process.argv)

// 2). 我们要实现脚手架 先做一个命令行交互的功能 inquirer
// 3). 将模版下载下来 download-git-repo
// 4). 根据用户的选择动态的生成内容 metalsmith
